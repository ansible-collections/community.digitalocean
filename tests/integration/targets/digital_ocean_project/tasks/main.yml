---
- block:

    - name: Ensure API key is provided
      ansible.builtin.fail:
        msg: do_api_key should be defined in tests/integration/integration_config.yml
      when:
        - do_api_key is not defined
        - do_api_key | length == 0

    - name: Ensure Project is absent (leftover)
      community.digitalocean.digital_ocean_project:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "my-test-project"
      register: result
      with_items:
        - "my-test-project"
        - "my-updated-test-project"

    - name: Verify Project is absent
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: Create the Project (present)
      community.digitalocean.digital_ocean_project:
        oauth_token: "{{ do_api_key }}"
        state: present
        name: "my-test-project"
        purpose: "IoT"
        description: "This is a test project"
        environment: "Development"
      register: result

    - name: Verify Project is present (from present)
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.project is defined
          - result.data.project.name is defined
          - result.data.project.name == "my-test-project"

    - name: Create the Project (existing, no changes)
      community.digitalocean.digital_ocean_project:
        oauth_token: "{{ do_api_key }}"
        state: present
        name: "my-test-project"
        purpose: "IoT"
        description: "This is a test project"
        environment: "Development"
      register: result

    - name: Verify Project is present (from existing)
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined
          - result.data.project is defined
          - result.data.project.name is defined
          - result.data.project.name == "my-test-project"

    - name: Update the project 
      community.digitalocean.digital_ocean_project:
        oauth_token: "{{ do_api_key }}"
        state: present
        name: "my-test-project"
        purpose: "IoT"
        description: "This is a test project"
        environment: "Production"
      register: result

    - name: Verify Project is updated
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.project is defined
          - result.data.project.name is defined
          - result.data.project.name == "my-test-project"
          - result.data.project.environment == "Production"

    - name: Update the project name
      community.digitalocean.digital_ocean_project:
        oauth_token: "{{ do_api_key }}"
        state: present
        name: "my-updated-test-project"
        id: "{{ result.data.project.id }}"
        purpose: "IoT"
        description: "This is a test project"
        environment: "Production"
      register: uresult

    - name: Verify Project name is updated
      ansible.builtin.assert:
        that:
          - uresult.changed
          - uresult.data is defined
          - uresult.data.project is defined
          - uresult.data.project.name is defined
          - uresult.data.project.name == "my-updated-test-project"
          - uresult.data.project.id == result.data.project.id

    - name: Update the project name with non-standard purpose
      community.digitalocean.digital_ocean_project:
        oauth_token: "{{ do_api_key }}"
        state: present
        name: "my-updated-test-project"
        purpose: "test"
        description: "This is a test project"
        environment: "Production"
      register: result

    - name: Verify Project is updated with non-standard purpose
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.project is defined
          - result.data.project.name is defined
          - result.data.project.name == "my-updated-test-project"
          - result.data.project.purpose == 'Other: test'

    - name: Update the project name with non-standard purpose (no change)
      community.digitalocean.digital_ocean_project:
        oauth_token: "{{ do_api_key }}"
        state: present
        name: "my-updated-test-project"
        purpose: "test"
        description: "This is a test project"
        environment: "Production"
      register: result

    - name: Verify Project is updated with non-standard purpose (no change)
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined
          - result.data.project is defined
          - result.data.project.name is defined
          - result.data.project.name == "my-updated-test-project"
          - result.data.project.purpose == 'Other: test'

    - name: Delete non-existent project
      community.digitalocean.digital_ocean_project:
        name: my-non-existant-project
        state: absent
        oauth_token: "{{ do_api_key }}"
      register: result

    - name: Verify project deletion (non-existing project)
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: Delete test project
      community.digitalocean.digital_ocean_project:
        name: "my-updated-test-project"
        oauth_token: "{{ do_api_key }}"
        state: absent
      register: result

    - name: Verify project deletion
      ansible.builtin.assert:
        that:
          - result.changed

  always:

    - name: Delete the Project
      community.digitalocean.digital_ocean_project:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "my-test-project"
      ignore_errors: true  # Should this fail, we'll clean it up next run

    - name: Delete the updated project
      community.digitalocean.digital_ocean_project:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "my-updated-test-project"
      ignore_errors: true # Should this fail, we'll clean it up next run
