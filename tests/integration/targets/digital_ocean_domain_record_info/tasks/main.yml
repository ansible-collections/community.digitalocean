---
- block:

    - name: Ensure API key is provided
      ansible.builtin.fail:
        msg: do_api_key should be defined in tests/integration/integration_config.yml
      when:
        - do_api_key is not defined
        - do_api_key | length == 0

    - name: Get domain records for existing domain
      community.digitalocean.digital_ocean_domain_record_info:
        oauth_token: "{{ do_api_key }}"
        domain: "{{ domain }}"
      register: result

    - name: Verify domain information fetched
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined
          - result.data.records is defined
          - result.data.records | type_debug == "list"

    - name: Get domain records for non-existent domain
      community.digitalocean.digital_ocean_domain_record_info:
        oauth_token: "{{ do_api_key }}"
        domain: "{{ non_existent_domain }}"
      register: result

    - name: Verify domain information fetched
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is not defined
          - result.msg is defined
          - result.msg is search("Error getting domain records")

    - name: Get NS domain records for existing domain
      community.digitalocean.digital_ocean_domain_record_info:
        oauth_token: "{{ do_api_key }}"
        domain: "{{ domain }}"
        type: NS
      register: result

    - name: Verify domain information fetched
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.data is defined
          - result.data.records is defined
          - result.data.records | type_debug == "list"
          - result.data.records | community.general.json_query('[*].type') | unique | length == 1
          - result.data.records | community.general.json_query('[*].type') | unique | first == "NS"

    - name: Get specific domain record by ID
      community.digitalocean.digital_ocean_domain_record_info:
        oauth_token: "{{ do_api_key }}"
        domain: "{{ domain }}"
        record_id: "{{ record_id }}"
      register: result

    - name: Verify domain information fetched
      ansible.builtin.assert:
        that:
          - not result.changed
          - not result.failed
          - result.data is defined
          - result.data.records is defined
          - result.data.records | length == 1
          - result.data.records.0.id == record_id
          - result.data.records.0.data == record_data

    - name: Get non-existent domain record by ID
      community.digitalocean.digital_ocean_domain_record_info:
        oauth_token: "{{ do_api_key }}"
        domain: "{{ domain }}"
        record_id: "{{ non_existent_record_id }}"
      register: result

    - name: Verify domain information fetched
      ansible.builtin.assert:
        that:
          - not result.changed
          - not result.failed
          - result.data is defined
          - result.data.records is defined
          - result.data.records | length == 0

    - name: Get specific domain record by ID (CNAME)
      community.digitalocean.digital_ocean_domain_record_info:
        oauth_token: "{{ do_api_key }}"
        domain: "{{ domain }}"
        record_id: "{{ cname_record_id }}"
      register: result

    - name: Verify domain information fetched (CNAME)
      ansible.builtin.assert:
        that:
          - not result.changed
          - not result.failed
          - result.data is defined
          - result.data.records is defined
          - result.data.records | length == 1
          - result.data.records.0.id == cname_record_id
          - result.data.records.0.data == cname_record_data
          - result.data.records.0.type == cname_record_type
