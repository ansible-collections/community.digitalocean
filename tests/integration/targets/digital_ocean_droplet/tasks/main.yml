---
- block:

    - name: Ensure API key is provided
      ansible.builtin.fail:
        msg: do_api_key should be defined in tests/integration/integration_config.yml
      when:
        - do_api_key is not defined
        - do_api_key | length == 0

    - name: Ensure Droplet is absent (leftover)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
      ignore_errors: true  # In case one was left from previous run
      register: result

    - name: Ensure Droplet is absent
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
      register: result

    - name: Verify Droplet is absent
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: Create the Droplet (present)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: present
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
        wait_timeout: 500
      register: result

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Verify Droplet is present (from present)
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.droplet is defined
          - result.data.droplet.name is defined
          - result.data.droplet.name == droplet_name
          - result.data.droplet.status in ["new", "active", "available"]

    - name: Destroy the Droplet (absent)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
      register: result

    - name: Verify Droplet is absent (from absent)
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Create the Droplet (active)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: active
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
        wait_timeout: 500
      register: result

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Verify Droplet is present (from active)
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.droplet is defined
          - result.data.droplet.name is defined
          - result.data.droplet.name == droplet_name
          - result.data.droplet.status in ["new", "active", "available"]

    - name: Delete the Droplet (absent)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
      register: result

    - name: Verify Droplet is absent (from absent)
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Create the Droplet (inactive)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: inactive
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
        wait_timeout: 1500
      register: result

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Verify Droplet is present (and off)
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.droplet is defined
          - result.data.droplet.name is defined
          - result.data.droplet.name == droplet_name
          - result.data.droplet.status == "off"

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

  always:

    - name: Delete the Droplet (always)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
      ignore_errors: true  # Should this fail, we'll clean it up next run
