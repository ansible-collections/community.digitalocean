---
- block:

    - name: Ensure API key is provided
      ansible.builtin.fail:
        msg: do_api_key should be defined in tests/integration/integration_config.yml
      when:
        - do_api_key is not defined
        - do_api_key | length == 0

    - name: Ensure Droplet is absent (leftover)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
      ignore_errors: true  # In case one was left from previous run
      register: result

    - name: Ensure Droplet is absent
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
      register: result

    - name: Verify Droplet is absent
      ansible.builtin.assert:
        that:
          - not result.changed

    - name: Create the Droplet (invalid region)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: present
        name: "{{ droplet_name }}"
        unique_name: true
        region: xyz1
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
      ignore_errors: true  # Expected to fail
      register: result

    - name: Verify invalid region fails
      ansible.builtin.assert:
        that:
          - result.msg is search("invalid region")

    - name: Create the Droplet (sleep_interval > wait_timeout)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: present
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
        sleep_interval: 1000
        wait_timeout: 500
      ignore_errors: true  # Expected to fail
      register: result

    - name: Verify invalid sleep_interval fails
      ansible.builtin.assert:
        that:
          - result.msg is search("Sleep interval")
          - result.msg is search("should be less")

    - name: Create the Droplet (sleep_interval <= 0)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: present
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
        sleep_interval: -100
        wait_timeout: 500
      ignore_errors: true  # Expected to fail
      register: result

    - name: Verify invalid sleep_interval fails
      ansible.builtin.assert:
        that:
          - result.msg is search("Sleep interval")
          - result.msg is search("should be greater")

    - name: Create the Droplet (present, not unique_name, and non-default project)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: present
        name: "{{ droplet_name }}"
        unique_name: false
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
        wait_timeout: 500
        project: "{{ secondary_project_name }}"
      register: result

    - name: Verify Droplet is present (from present, not unique_name, and non-default project)
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data.droplet.name == droplet_name
          - result.data.droplet.status in ["new", "active", "available"]
          - result.assign_status == "assigned"
          - result.msg is search("Assigned")
          - result.msg is search("to project " ~ secondary_project_name)

    - name: Destroy the Droplet (absent)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "{{ droplet_name }}"
        id: "{{ result.data.droplet.id }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
      register: result

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Create the Droplet (present, unique_name, and non-default project)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: present
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
        wait_timeout: 500
        project: "{{ secondary_project_name }}"
      register: result

    - name: Verify Droplet is present (from present)
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data.droplet.name == droplet_name
          - result.data.droplet.status in ["new", "active", "available"]
          - result.assign_status == "assigned"
          - result.msg is search("Assigned")
          - result.msg is search("to project " ~ secondary_project_name)

    - name: Destroy the Droplet (absent)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
      register: result

    - name: Verify Droplet is absent (from absent)
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Create the Droplet (present, unique_name, default project)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: present
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
        wait_timeout: 500
      register: result

    - name: Verify Droplet is present (from present)
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data.droplet.name == droplet_name
          - result.data.droplet.status in ["new", "active", "available"]

    - name: Destroy the Droplet (absent)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
      register: result

    - name: Verify Droplet is absent (from absent)
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Create the Droplet (active)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: active
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
        wait_timeout: 500
      register: result

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Verify Droplet is present (from active)
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.droplet is defined
          - result.data.droplet.name is defined
          - result.data.droplet.name == droplet_name
          - result.data.droplet.status in ["new", "active", "available"]

    - name: Delete the Droplet (absent)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
      register: result

    - name: Verify Droplet is absent (from absent)
      ansible.builtin.assert:
        that:
          - result.changed

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Create the Droplet (inactive)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: inactive
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
        wait_timeout: 1500
      register: result

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Verify Droplet is present (and off)
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.droplet is defined
          - result.data.droplet.name is defined
          - result.data.droplet.name == droplet_name
          - result.data.droplet.status == "off"

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Resize the Droplet (and active)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: active
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_new_size }}"
        wait_timeout: 1500
      register: result

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Verify Droplet is active and resized
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.droplet is defined
          - result.data.droplet.name is defined
          - result.data.droplet.name == droplet_name
          - result.data.droplet.status == "active"
          - result.data.droplet.size_slug is defined
          - result.data.droplet.size_slug == droplet_new_size

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Delete the Droplet (always)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
      ignore_errors: true  # Should this fail, we'll clean it up next run

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Create the Droplet (and assign to Project)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: active
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
        wait_timeout: 500
        project: "{{ project_name }}"
      register: result

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Verify Droplet is present (from active)
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.droplet is defined
          - result.data.droplet.name is defined
          - result.data.droplet.name == droplet_name
          - result.data.droplet.status in ["new", "active", "available"]
          - result.assign_status is defined
          - result.assign_status == "assigned"
          - result.msg is defined
          - "'Assigned do:droplet' in result.msg"
          - result.resources is defined
          - result.resources.status is defined
          - result.resources.status == "assigned"
    # Droplet plus firewall tests
    - name: Create a test firewall
      community.digitalocean.digital_ocean_firewall:
        oauth_token: "{{ do_api_key }}"
        name: "{{ firewall_name }}"
        state: present
        inbound_rules: "{{ firewall_inbound_rules }}"
        outbound_rules: "{{ firewall_outbound_rules }}"
        droplet_ids: []
      register: testing_firewall

    - name: Verify firewall was created
      ansible.builtin.assert:
        that:
          - testing_firewall is defined
          - testing_firewall.changed is true

    - name: Create a new droplet and add to the above firewall
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: present
        name: "{{ droplet_name }}"
        unique_name: true
        firewall: ["{{ firewall_name }}"]
        size: "{{ droplet_size }}"
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        wait_timeout: 500
      register: firewall_droplet

    - name: Verify the droplet has created and has firewall applied
      ansible.builtin.assert:
        that:
          - firewall_droplet is defined
          - firewall_droplet.changed is true

    - name: Check our firewall for the new droplet
      community.digitalocean.digital_ocean_firewall_info:
        oauth_token: "{{ do_api_key }}"
        name: "{{ firewall_name }}"
      register: firewall_settings

    - name: Verify details of firewall with droplet
      ansible.builtin.assert:
        that:
          - firewall_settings is defined
          - "{{ (firewall_settings.data | map(attribute='droplet_ids'))[0] | length > 0 }}"
          - "{{ firewall_droplet.data.droplet.id }} in {{ (firewall_settings.data | map(attribute='droplet_ids'))[0] }}"

    - name: Rerun on above droplet and remove firewall
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: present
        name: "{{ droplet_name }}"
        unique_name: true
        firewall: []
        size: "{{ droplet_size }}"
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        wait_timeout: 500
      register: firewall_droplet_removal

    - name: Verify things were changed for firewall removal
      ansible.builtin.assert:
        that:
          - firewall_droplet_removal is defined
          - firewall_droplet_removal.changed is true

    - name: Check our firewall for the droplet being removed
      community.digitalocean.digital_ocean_firewall_info:
        oauth_token: "{{ do_api_key }}"
        name: "{{ firewall_name }}"
      register: firewall_settings_removal

    - name: Verify details of firewall with droplet
      ansible.builtin.assert:
        that:
          - firewall_settings_removal is defined
          - "{{ (firewall_settings_removal.data | map(attribute='droplet_ids'))[0] | length == 0 }}"
          - "{{ firewall_droplet.data.droplet.id }} not in {{ firewall_settings_removal.data | map(attribute='droplet_ids') }}"

  always:

    - name: Delete the Firewall (always)
      community.digitalocean.digital_ocean_firewall:
        oauth_token: "{{ do_api_key }}"
        name: "{{ firewall_name }}"
        state: absent

    - name: Delete the Droplet (always)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
      ignore_errors: true  # Should this fail, we'll clean it up next run
