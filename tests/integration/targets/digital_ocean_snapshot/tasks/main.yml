---
- block:

    - name: Ensure API key is provided
      ansible.builtin.fail:
        msg: do_api_key should be defined in tests/integration/integration_config.yml
      when:
        - do_api_key is not defined
        - do_api_key | length == 0

    #
    #  Droplet snapshot
    #

    - name: Ensure Droplet is absent (leftover)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
      ignore_errors: true  # In case one was left from previous run

    - name: Create the Droplet
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: active
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
        wait_timeout: 500
      register: result

    - name: Verify Droplet is present
      ansible.builtin.assert:
        that:
          - result.changed
          - result.data is defined
          - result.data.droplet is defined
          - result.data.droplet.name is defined
          - result.data.droplet.name == droplet_name
          - result.data.droplet.status in ["new", "active", "available"]

    - name: Set a fact for the Droplet id
      ansible.builtin.set_fact:
        droplet_id: "{{ result.data.droplet.id }}"

    - name: Snapshot the Droplet
      community.digitalocean.digital_ocean_snapshot:
        state: present
        snapshot_type: droplet
        snapshot_name: "{{ snapshot_name }}"
        droplet_id: "{{ droplet_id }}"
        oauth_token: "{{ do_api_key }}"
        wait_timeout: 500
      register: result

    - name: Verify snapshot is present
      ansible.builtin.assert:
        that:
          - result.changed
          - not result.failed
          - result.msg is search("Created snapshot")

    - name: Gather information about all snapshots
      community.digitalocean.digital_ocean_snapshot_info:
        oauth_token: "{{ do_api_key }}"
      register: snapshot_info

    - name: Set a fact for the snapshot id
      ansible.builtin.set_fact:
        snapshot_id: "{{ item.id }}"
      loop: "{{ snapshot_info.data | community.general.json_query(name) }}"
      vars:
        name: "[?name=='{{ snapshot_name }}']"

    - name: Verify snapshot id is defined
      ansible.builtin.assert:
        that:
          - snapshot_id is defined

    - name: Delete the snapshot
      community.digitalocean.digital_ocean_snapshot:
        state: absent
        snapshot_id: "{{ snapshot_id }}"
        oauth_token: "{{ do_api_key }}"
      register: result

    - name: Verify snapshot is absent
      ansible.builtin.assert:
        that:
          - result.changed
          - not result.failed
          - result.msg is search("Deleted snapshot")

    #
    #  Volume snapshot
    #

    - name: Ensure volume is absent (leftover)
      community.digitalocean.digital_ocean_block_storage:
        oauth_token: "{{ do_api_key }}"
        command: create
        state: absent
        volume_name: "{{ volume_name }}"
        region: "{{ do_region }}"
        block_size: "{{ volume_size }}"
      ignore_errors: true  # In case one was left from previous run

    - name: Create a volume
      community.digitalocean.digital_ocean_block_storage:
        oauth_token: "{{ do_api_key }}"
        command: create
        state: present
        volume_name: "{{ volume_name }}"
        region: "{{ do_region }}"
        block_size: "{{ volume_size }}"
      register: result

    - name: Verify volume is present
      ansible.builtin.assert:
        that:
          - result.changed
          - not result.failed

    - name: Set a fact for the volume id
      ansible.builtin.set_fact:
        volume_id: "{{ result.id }}"

    - name: Snapshot the volume
      community.digitalocean.digital_ocean_snapshot:
        state: present
        snapshot_type: volume
        snapshot_name: "{{ snapshot_name }}"
        volume_id: "{{ volume_id }}"
        oauth_token: "{{ do_api_key }}"
        wait_timeout: 500
      register: result

    - name: Verify snapshot is present
      ansible.builtin.assert:
        that:
          - result.changed
          - not result.failed
          - result.msg is search("Created snapshot")

    - name: Get information about all snapshots
      community.digitalocean.digital_ocean_snapshot_info:
        oauth_token: "{{ do_api_key }}"
      register: snapshot_info

    - name: Set a fact for the snapshot id
      ansible.builtin.set_fact:
        snapshot_id: "{{ item.id }}"
      loop: "{{ snapshot_info.data | community.general.json_query(name) }}"
      vars:
        name: "[?name=='{{ snapshot_name }}']"

    - name: Verify snapshot id is defined
      ansible.builtin.assert:
        that:
          - snapshot_id is defined

    - name: Delete the snapshot
      community.digitalocean.digital_ocean_snapshot:
        state: absent
        snapshot_id: "{{ snapshot_id }}"
        oauth_token: "{{ do_api_key }}"
      register: result

    - name: Verify snapshot is absent
      ansible.builtin.assert:
        that:
          - result.changed
          - not result.failed
          - result.msg is search("Deleted snapshot")

    - name: Remove the volume
      community.digitalocean.digital_ocean_block_storage:
        oauth_token: "{{ do_api_key }}"
        command: create
        state: absent
        volume_name: "{{ volume_name }}"
        region: "{{ do_region }}"
      register: result

    - name: Verify the volume is deleted
      ansible.builtin.assert:
        that:
          - result.changed

  always:

    - name: Delete the Droplet
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
      ignore_errors: true  # Should this fail, we'll clean it up next run

    - name: Remove the volume
      community.digitalocean.digital_ocean_block_storage:
        oauth_token: "{{ do_api_key }}"
        command: create
        state: absent
        volume_name: "{{ volume_name }}"
        region: "{{ do_region }}"
      ignore_errors: true  # Should this fail, we'll clean it up next run
