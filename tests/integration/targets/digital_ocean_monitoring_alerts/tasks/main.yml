---
- block:

    - name: Ensure API key is provided
      ansible.builtin.fail:
        msg: do_api_key should be defined in tests/integration/integration_config.yml
      when:
        - do_api_key is not defined
        - do_api_key | length == 0

    - name: Ensure Droplet is absent (leftover)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
      ignore_errors: true  # In case one was left from previous run

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Create the Droplet (active)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: active
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
        wait_timeout: 500
      register: droplet

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Verify Droplet is present (from active)
      ansible.builtin.assert:
        that:
          - droplet.changed
          - droplet.data is defined
          - droplet.data.droplet is defined
          - droplet.data.droplet.name is defined
          - droplet.data.droplet.name == droplet_name
          - droplet.data.droplet.status in ["new", "active", "available"]

    - name: Create Droplet Monitoring alerts policy
      community.digitalocean.digital_ocean_monitoring_alerts:
        state: present
        oauth_token: "{{ do_api_key }}"
        alerts:
          email: ["{{ alert_email }}"]
          slack: []
        compare: GreaterThan
        description: Droplet load1 alert
        enabled: true
        entities: ["{{ droplet.data.droplet.id }}"]
        tags: ["my_alert_tag"]
        type: v1/insights/droplet/load_1
        value: 3.14159
        window: 5m
      register: monitoring_alert_policy

    - name: Verify Monitoring alerts policy is present
      ansible.builtin.assert:
        that:
          - monitoring_alert_policy.changed
          - monitoring_alert_policy.data is defined

    - name: Create Droplet Monitoring alerts policy
      community.digitalocean.digital_ocean_monitoring_alerts:
        state: present
        oauth_token: "{{ do_api_key }}"
        alerts:
          email: ["{{ alert_email }}"]
          slack: []
        compare: GreaterThan
        description: Droplet load1 alert
        enabled: true
        entities: ["{{ droplet.data.droplet.id }}"]
        tags: ["my_alert_tag"]
        type: v1/insights/droplet/load_1
        value: 3.14159
        window: 5m
      register: monitoring_alert_policy

    - name: Verify Monitoring alerts policy is not changed (idempotency)
      ansible.builtin.assert:
        that:
          - not monitoring_alert_policy.changed
          - monitoring_alert_policy.data is defined

    - name: Get Droplet Monitoring alerts polices
      community.digitalocean.digital_ocean_monitoring_alerts_info:
        oauth_token: "{{ do_api_key }}"
      register: monitoring_alerts

    - name: Verify Monitoring alerts has data and is not changed
      ansible.builtin.assert:
        that:
          - not monitoring_alerts.changed
          - monitoring_alerts.data is defined

    - name: Delete Droplet Monitoring alerts policy
      community.digitalocean.digital_ocean_monitoring_alerts:
        state: absent
        oauth_token: "{{ do_api_key }}"
        uuid: "{{ monitoring_alert_policy.data.uuid }}"
      register: result

    - name: Verify Monitoring alerts policy is deleted
      ansible.builtin.assert:
        that:
          - result.changed

  always:

    - name: Delete the Droplet
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
      register: result

    - name: Verify Droplet is deleted
      ansible.builtin.assert:
        that:
          - result.changed
