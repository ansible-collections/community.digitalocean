---
- block:

    - name: Ensure API key is provided
      ansible.builtin.fail:
        msg: do_api_key should be defined in tests/integration/integration_config.yml
      when:
        - do_api_key is not defined
        - do_api_key | length == 0

    - name: Gather information about all Floating IPs
      community.digitalocean.digital_ocean_floating_ip_info:
        oauth_token: "{{ do_api_key }}"
      register: result

    - name: Verify we retrieved all Floating IPs
      ansible.builtin.assert:
        that:
          - not result.changed
          - not result.failed

    - name: Delete existing Floating IPs
      community.digitalocean.digital_ocean_floating_ip:
        state: absent
        ip: "{{ item.ip }}"
        oauth_token: "{{ do_api_key }}"
      loop: "{{ result.floating_ips }}"

    - name: Create the testing Droplet (active)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: active
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
        wait_timeout: 500
      register: droplet_result

    - name: Verify Droplet is active
      ansible.builtin.assert:
        that:
          - droplet_result.changed
          - droplet_result.data is defined
          - droplet_result.data.droplet is defined
          - droplet_result.data.droplet.name is defined
          - droplet_result.data.droplet.name == droplet_name
          - droplet_result.data.droplet.status == "active"

    - name: Create a Floating IP and assign to Project
      community.digitalocean.digital_ocean_floating_ip:
        state: present
        region: "{{ do_region }}"
        oauth_token: "{{ do_api_key }}"
        project: "{{ project_name }}"
      register: floating_ip

    - name: Verify that a Floating IP was created (and assigned to Project)
      ansible.builtin.assert:
        that:
          - floating_ip.changed
          - floating_ip.assign_status is defined
          - floating_ip.assign_status == "assigned"
          - floating_ip.msg is defined
          - "'Assigned do:floatingip' in floating_ip.msg"
          - floating_ip.resources is defined
          - floating_ip.resources.status is defined
          - floating_ip.resources.status == "assigned"

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: Delete the Floating IP
      community.digitalocean.digital_ocean_floating_ip:
        state: absent
        ip: "{{ floating_ip.data.floating_ip.ip }}"
        region: "{{ do_region }}"
        oauth_token: "{{ do_api_key }}"
      register: result
      when:
        - floating_ip.data.floating_ip.ip is defined

    - name: Verify that a Floating IP was deleted
      ansible.builtin.assert:
        that:
          - result.changed
      when:
        - floating_ip.data.floating_ip.ip is defined

    - name: Give the cloud a minute to settle
      ansible.builtin.pause:
        minutes: 1

    - name: "Create a Floating IP"
      community.digitalocean.digital_ocean_floating_ip:
        state: present
        region: "{{ do_region }}"
        oauth_token: "{{ do_api_key }}"
      register: floating_ip

    - name: Verify that a Floating IP was created
      ansible.builtin.assert:
        that:
          - floating_ip.changed

    - name: Gather information about all Floating IPs
      community.digitalocean.digital_ocean_floating_ip_info:
        oauth_token: "{{ do_api_key }}"
      register: result

    - name: Verify we retrieved all Floating IPs
      ansible.builtin.assert:
        that:
          - not result.changed
          - not result.failed

    - name: Find our Floating IP
      set_fact:
        ci_floating_ip: "{{ result.floating_ips | selectattr('ip', 'equalto', floating_ip.data.floating_ip.ip) }}"
      register: result_find

    - name: Verify we found our Floating IP
      ansible.builtin.assert:
        that:
          - not result_find.changed
          - not result_find.failed
          - result_find.ansible_facts.ci_floating_ip is defined
          - result_find.ansible_facts.ci_floating_ip | length == 1

    - name: Attach the Floating IP
      community.digitalocean.digital_ocean_floating_ip:
        state: attached
        ip: "{{ floating_ip.data.floating_ip.ip }}"
        droplet_id: "{{ droplet_result.data.droplet.id }}"
        oauth_token: "{{ do_api_key }}"
      register: attach_result
      when:
        - floating_ip.data.floating_ip.ip is defined
        - droplet_result.data.droplet.id is defined

    - name: Verify that a Floating IP was attached
      ansible.builtin.assert:
        that:
          - attach_result.changed
      when:
        - floating_ip.data.floating_ip.ip is defined
        - droplet_result.data.droplet.id is defined
        - attach_result is defined

    - name: Detach the Floating IP
      community.digitalocean.digital_ocean_floating_ip:
        state: detached
        ip: "{{ floating_ip.data.floating_ip.ip }}"
        oauth_token: "{{ do_api_key }}"
      register: detach_result
      when:
        - floating_ip.data.floating_ip.ip is defined
        - droplet_result.data.droplet.id is defined
        - attach_result.changed

    - name: Verify that a Floating IP was detached
      ansible.builtin.assert:
        that:
          - detach_result.changed
      when:
        - floating_ip.data.floating_ip.ip is defined
        - droplet_result.data.droplet.id is defined
        - detach_result is defined

  always:

    - name: Delete the Floating IP
      community.digitalocean.digital_ocean_floating_ip:
        state: absent
        ip: "{{ floating_ip.data.floating_ip.ip }}"
        region: "{{ do_region }}"
        oauth_token: "{{ do_api_key }}"
      register: result
      when:
        - floating_ip.data.floating_ip.ip is defined

    - name: Verify that a Floating IP was deleted
      ansible.builtin.assert:
        that:
          - result.changed
      when:
        - floating_ip.data.floating_ip.ip is defined

    - name: Destroy the Droplet (absent)
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ do_api_key }}"
        state: absent
        name: "{{ droplet_name }}"
        unique_name: true
        region: "{{ do_region }}"
        image: "{{ droplet_image }}"
        size: "{{ droplet_size }}"
      register: destroy_result

    - name: Verify Droplet is absent (from absent)
      ansible.builtin.assert:
        that:
          - destroy_result.changed
