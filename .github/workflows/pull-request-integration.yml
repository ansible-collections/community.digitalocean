name: pull-request-integration

on:
  pull_request_target:
    branches: [main]
    types: [opened, synchronize, reopened]
    paths:
      - plugins/module_utils/**
      - plugins/modules/**

concurrency:
  group: cloud-integration-tests
  cancel-in-progress: false

env:
  DEFAULT_BRANCH: remotes/origin/main

jobs:
  changes:
    # Require reviewers for this environment
    # https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
    environment: integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: show changes files
        run: |
          git diff --name-only $DEFAULT_BRANCH

      - name: get changed module_utils
        id: changed-module-utils
        run: |
          basenames=()
          for file in $(git diff --name-only $DEFAULT_BRANCH | grep 'plugins/module_utils/'); do
            basenames+=($(basename $file .py))
          done
          printf '::set-output name=matrix::%s\n' $(printf '%s\n' "${basenames[@]}" | jq -R . | jq -sc .)

      - name: get changed modules
        id: changed-modules
        run: |
          basenames=()
          for file in $(git diff --name-only $DEFAULT_BRANCH | grep 'plugins/modules/'); do
            basenames+=($(basename $file .py))
          done
          printf '::set-output name=matrix::%s\n' $(printf '%s\n' "${basenames[@]}" | jq -R . | jq -sc .)

    outputs:
      module-utils-matrix: ${{ steps.changed-module-utils.outputs.matrix }}
      module-matrix: ${{ steps.changed-modules.outputs.matrix }}

  test-module-utils:
    environment: integration
    runs-on: ubuntu-latest
    timeout-minutes: 120
    needs: [changes]
    if: ${{ needs.changes.outputs.module-utils-matrix != '[""]' }}
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        module:
          - account_info
    steps:
      - name: Perform testing (all modules)
        uses: ansible-community/ansible-test-gh-action@release/v1
        with:
          git-checkout-ref: ${{ github.event.pull_request.head.sha }}
          pre-test-cmd: >-
            DO_API_KEY=${{ secrets.DO_API_KEY }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            ./tests/utils/render.sh
            tests/integration/integration_config.yml.template
            > tests/integration/integration_config.yml
          origin-python-version: 3.9
          target-python-version: 3.9
          testing-type: integration
          test-deps: community.general
          target: ${{ matrix.module }}

  test-modules:
    environment: integration
    runs-on: ubuntu-latest
    timeout-minutes: 40
    needs: [changes]
    if: ${{ needs.changes.outputs.module-utils-matrix == '[""]' && needs.changes.outputs.module-matrix != '[""]' }}
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJSON(needs.changes.outputs.module-matrix) }}
    steps:
      - name: Perform testing (changed module)
        uses: ansible-community/ansible-test-gh-action@release/v1
        with:
          git-checkout-ref: ${{ github.event.pull_request.head.sha }}
          pre-test-cmd: >-
            DO_API_KEY=${{ secrets.DO_API_KEY }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            ./tests/utils/render.sh
            tests/integration/integration_config.yml.template
            > tests/integration/integration_config.yml
          origin-python-version: 3.9
          target-python-version: 3.9
          testing-type: integration
          test-deps: community.general
          target: ${{ matrix.module }}
